// Node.js runs on javascript

// In front-end development, the javascript code is limited to the browser.
// The sourcecode can't reach the user's machine to access files, get network traffic etc.
// It is done for security purposes.

// Node.js allows to write codes which can directly interact with hardware of machine. (no longer bound inside the browser)
// Hence Node.js can be used to make web application which can run either on user machine or client machine.

// Node REPL (Read Evaluation Print Loop) is a line by line interpreter version of JS
--> .exit to get outside the Node REPL

// Node.js comes bundled with many modules/libraries
// Syntax to include a library :- 
    const moduleID = req("module_name") 


// filesystem module in nodejs      [asynchronous methods are recommended for servers]
--> const fsModule = require("fs");

--> read a file using "readFile" method
    --> two methods :- 
    1. readFile(asynchronously read the file)   
    2. readFileSync(synchronously read the file)

syntax :- const data = fsModule.readFileSync(path, 'format')
syntax :- const data = fsModule.readFile(path, 'format', handler)

--> write to a file using "writeFile" method
    --> two methods :- 
    1. writeFile(asynchronously write the file)   
    2. writeFileSync(synchronously write the file)

syntax :- fsModule.writeFileSync(path, 'newcontent')
syntax :- fsModule.writeFile(path, 'newcontent', handler)

--> append to a pre-existing file using "appendFile" method
    --> two methods :- 
    1. appendFile(asynchronously append the file)   
    2. appendFileSync(synchronously append the file)

syntax :- fsModule.appendFileSync(path, 'additional_content')
syntax :- fsModule.appendFile(path, 'additional_content', handler)

--> copy a file into another file using "copyFile" method
    --> two methods :- 
    1. copyFile(asynchronously copy the file)   
    2. copyFileSync(synchronously copy the file)

syntax :- fsModule.copyFileSync(src_path, dest_path)
syntax :- fsModule.copyFile(src_path, dest_path, handler)

--> delete a file using "unlink" method
    --> two methods :-
    1. unlink(asynchronously delete the file)   
    2. unlinkSync(synchronously delete the file)

syntax :- fsModule.unlinkSync(path)
syntax :- fsModule.unlink(path, handler)

Note :- all synchronous methods should be enclosed in try catch block
Note :- all aynchronous methods must include a error handler function



// Node.js also has many external modules/libraries which is incorporated by npm (node package manager)
Steps to include external packages using npm :-

Step 1 :- In the Project directory, initialise the npm using "npm init"
Step 2 :- For downloading any lbrary, use "npm install package_name"
Step 3 :- Use the package inside the JS file specified as entry point in "npm init"